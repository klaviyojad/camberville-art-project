{"version":3,"sources":["icons/rainbow.svg","icons/plant.svg","icons/sky.svg","icons/spring.svg","icons/ocean.svg","icons/earth.svg","icons/love.svg","icons/thankyou.svg","icons/animals.svg","icons/shapes.svg","icons/home.svg","firebase.js","constants.js","components/ArtEntryModal.js","Confirm.js","ArtProjectMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","process","authDomain","databaseURL","ALL_OPTIONS","ALL_WEEKS","RECORDS","week","option","image","Icons","alt","ArtEntryModal","props","mapTypeOfArt","typeOfArt","state","otherValue","onRadioChange","e","setState","target","value","handleSubmit","setIsModalOpen","addNewArtEntry","updateSelectedValue","updateInputValue","Constants","length","Modal","setAppElement","this","isModalOpen","isOpen","onRequestClose","shouldCloseOnOverlayClick","className","role","aria-label","tabIndex","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","htmlFor","id","onChange","map","key","JSON","stringify","type","checked","React","Component","ConfirmStatusChange","open","callback","show","event","preventDefault","hide","confirm","children","title","description","ArtProjectMap","database","ref","push","fetch","modalLng","modalLat","then","response","json","result","artEntry","features","place_name","Moment","Date","format","update","updateStateWithNewArtEntry","handleViewportChange","viewport","handleDelete","console","log","selectedArtEntry","remove","newArtEntries","artEntries","filter","mapRef","createRef","isLoadedData","latitude","longitude","zoom","style","cursor","active","newState","auth","signInAnonymously","on","snapshot","val","total","numChildren","count","Object","entries","options","i","name","Array","isArray","mapboxApiAccessToken","onViewportChange","mapStyle","lngLat","getCursor","lat","lng","record","Week","includes","src","onClose","closeOnClick","captureClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac7c1167.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rainbow.5e892f67.svg\";","module.exports = __webpack_public_path__ + \"static/media/plant.25382a35.svg\";","module.exports = __webpack_public_path__ + \"static/media/sky.07427359.svg\";","module.exports = __webpack_public_path__ + \"static/media/spring.af113fcb.svg\";","module.exports = __webpack_public_path__ + \"static/media/ocean.eb505191.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.3f938223.svg\";","module.exports = __webpack_public_path__ + \"static/media/love.81c82435.svg\";","module.exports = __webpack_public_path__ + \"static/media/thankyou.09818393.svg\";","module.exports = __webpack_public_path__ + \"static/media/animals.409f08f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/shapes.714cf2e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/home.f09e309a.svg\";","import firebase from 'firebase'\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n\n","import * as Icons from './icons'\n\nexport const OPTION_RAINBOWS = \"rainbows\"\nexport const OPTION_PLANTS = \"plants\"\nexport const OPTION_SKY = \"sky\"\nexport const OPTION_SPRING = \"spring\"\nexport const OPTION_OCEAN = \"ocean\"\nexport const OPTION_EARTH = \"earth\"\nexport const OPTION_LOVE = \"love\"\nexport const OPTION_THANK_YOU = \"thank you\"\nexport const OPTION_ANIMALS = \"animals\"\nexport const OPTION_SHAPES = \"shapes\"\nexport const OPTION_HOME = \"home\"\n\n\nexport const WEEK_PLANTS = \"week 1 - plants\"\nexport const WEEK_RAINBOWS = \"week 2 - rainbows\"\nexport const WEEK_SKIES = \"week 3 - skies\"\nexport const WEEK_SPRING = \"week 4 - spring\"\nexport const WEEK_OCEAN = \"week 5 - ocean\"\nexport const WEEK_EARTH = \"week 6 - earth\"\nexport const WEEK_LOVE = \"week 7 - love\"\nexport const WEEK_THANK_YOU = \"week 8 - thank you\"\nexport const WEEK_ANIMALS = \"week 9 - animals\"\nexport const WEEK_SHAPES = \"week 10 - shapes\"\nexport const WEEK_HOME = \"week 11 - home\"\n\nexport const ALL_OPTIONS = [OPTION_RAINBOWS, OPTION_PLANTS, OPTION_SKY, OPTION_SPRING, OPTION_OCEAN, OPTION_EARTH, OPTION_LOVE, OPTION_THANK_YOU, OPTION_ANIMALS, OPTION_SHAPES, OPTION_HOME]\n\nexport const ALL_WEEKS = [WEEK_PLANTS, WEEK_RAINBOWS, WEEK_SKIES, WEEK_SPRING, WEEK_OCEAN, WEEK_EARTH, WEEK_LOVE, WEEK_THANK_YOU, WEEK_ANIMALS, WEEK_SHAPES, WEEK_HOME]\n\nexport const TYPE_OF_ART_WINDOW = \"window art\"\nexport const TYPE_OF_ART_SIDEWALK = \"sidewalk art\"\nexport const TYPE_OF_ART_OUTSIDE = \"outside art\"\nexport const TYPE_OF_ART_OTHER = \"other\"\n\n\nexport const RECORDS = [\n    {\n        week: WEEK_PLANTS,\n        option: OPTION_PLANTS,\n        image: Icons.plant,\n        alt: \"Plant Icon\"\n    },\n    {\n        week: WEEK_RAINBOWS,\n        option: OPTION_RAINBOWS,\n        image: Icons.rainbow,\n        alt: \"Rainbow Icon\"\n    },\n    {\n        week: WEEK_SKIES,\n        option: OPTION_SKY,\n        image: Icons.sky,\n        alt: \"Sky Icon\"\n    },\n    {\n        week: WEEK_SPRING,\n        option: OPTION_SPRING,\n        image: Icons.spring,\n        alt: \"Spring Icon\"\n    },\n    {\n        week: WEEK_OCEAN,\n        option: OPTION_OCEAN,\n        image: Icons.ocean,\n        alt: \"Ocean Icon\"\n    },\n    {\n        week: WEEK_EARTH,\n        option: OPTION_EARTH,\n        image: Icons.earth,\n        alt: \"Earth Icon\"\n    },\n    {\n        week: WEEK_LOVE,\n        option: OPTION_LOVE,\n        image: Icons.love,\n        alt: \"Love Icon\"\n    },\n    {\n        week: WEEK_THANK_YOU,\n        option: OPTION_THANK_YOU,\n        image: Icons.thankyou,\n        alt: \"Thank You Icon\"\n    },\n    {\n        week: WEEK_ANIMALS,\n        option: OPTION_ANIMALS,\n        image: Icons.animals,\n        alt: \"Animals Icon\"\n    },\n    {\n        week: WEEK_SHAPES,\n        option: OPTION_SHAPES,\n        image: Icons.shapes,\n        alt: \"Shapes Icon\"\n    },\n    {\n        week: WEEK_HOME,\n        option: OPTION_HOME,\n        image: Icons.home,\n        alt: \"Home Icon\"\n    },\n\n]","import React from 'react';\nimport Modal from 'react-modal'\nimport * as Constants from '../constants';\n\nclass ArtEntryModal extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            typeOfArt: Constants.TYPE_OF_ART_WINDOW,\n            week: Constants.ALL_WEEKS[Constants.ALL_WEEKS.length - 1],\n            otherValue: \"\"\n        }\n    }\n\n\n    mapTypeOfArt = (typeOfArt) => {\n        if (typeOfArt === Constants.TYPE_OF_ART_WINDOW)\n            return \"Window Art\"\n        if (typeOfArt === Constants.TYPE_OF_ART_SIDEWALK)\n            return \"Sidewalk Art\"\n        if (typeOfArt === Constants.TYPE_OF_ART_OUTSIDE)\n            return \"Outside Art\"\n        if (typeOfArt === Constants.TYPE_OF_ART_OTHER)\n            return this.state.otherValue\n    }\n\n    onRadioChange = (e) => {\n        this.setState({\n            typeOfArt: e.target.value\n        });\n    }\n\n    handleSubmit = (e, setIsModalOpen, addNewArtEntry) => {\n\n        /* if (this.state.typeOfArt === \"window art\")\n            typeOfArt = \"Window Art\"\n        else if (this.state.typeOfArt === \"sidewalk art\")\n            typeOfArt = \"Sidewalk Art\"\n        else if (this.state.typeOfArt === \"outside art\")\n            typeOfArt = \"Outside Art\"\n        else if (this.state.typeOfArt === \"other\")\n            typeOfArt = this.state.otherValue */\n\n        addNewArtEntry(this.state.week, this.mapTypeOfArt(this.state.typeOfArt))\n\n        setIsModalOpen(false)\n\n    }\n\n    updateSelectedValue = (e) => {\n        this.setState({\n            week: e.target.value\n        });\n    }\n\n    updateInputValue = (e) => {\n        this.setState({\n            otherValue: e.target.value\n        });\n    }\n\n    render() {\n        Modal.setAppElement(\"#root\")\n\n        const { isModalOpen, setIsModalOpen, addNewArtEntry } = this.props\n\n        return (<Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)} shouldCloseOnOverlayClick={false} className=\"Modal\"\n        >\n            <div className=\"modal-wrapper\">\n                <div className=\"modal-header\">\n                    <h3>New Art Project Entry</h3>\n                    <span\n                        className=\"Icon\"\n                        role=\"button\"\n                        aria-label=\"Close Modal\"\n                        tabIndex={0}\n                        onClick={() => setIsModalOpen(false)}\n                    >\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"20px\"\n                            height=\"20px\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"#000000\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"square\"\n                            strokeLinejoin=\"inherit\"\n                        >\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                        </svg>\n                    </span>\n                </div>\n                <div className=\"modal-body\">\n                    <label htmlFor=\"week\">Theme:&nbsp;</label>\n\n                    <select id=\"week\" onChange={this.updateSelectedValue} value={this.state.week}>\n                        {\n                            Constants.ALL_WEEKS.map(week => {\n                                return (\n                                    <option key={`${JSON.stringify(week)}`} value={week}>{week}</option>)\n                            })\n                        }\n                    </select>\n                    <p>Type of Art:</p>\n                    <ul>\n                        <li>\n                            <label><input type=\"radio\" value=\"window art\" checked={this.state.typeOfArt === \"window art\"}\n                                onChange={this.onRadioChange} />Window Art</label>\n                        </li>\n                        <li>\n                            <label><input type=\"radio\" value=\"sidewalk art\" checked={this.state.typeOfArt === \"sidewalk art\"}\n                                onChange={this.onRadioChange} />Sidewalk Art</label>\n                        </li>\n                        <li>\n                            <label><input type=\"radio\" value=\"outside art\" checked={this.state.typeOfArt === \"outside art\"}\n                                onChange={this.onRadioChange} />Outside Art</label>\n                        </li>\n                        <li>\n                            <label><input type=\"radio\" value=\"other\" checked={this.state.typeOfArt === \"other\"} onChange={this.onRadioChange} />Other:&nbsp;</label>\n                            <input type=\"text\" value={this.state.otherValue} onChange={this.updateInputValue} />\n                        </li>\n                    </ul>\n\n\n                    <button type=\"button\" className=\"modal-btn\" onClick={(e) => this.handleSubmit(e, setIsModalOpen, addNewArtEntry)}>\n                        Save\n                </button>\n\n                </div>\n\n            </div>\n\n        </Modal>\n        )\n    }\n}\n\nexport { ArtEntryModal }\n\n","import * as React from \"react\"\nimport { Dialog } from \"@reach/dialog\"\nimport './ArtProjectMap.css'\n\nexport default class ConfirmStatusChange extends React.Component {\n    state = {\n        open: false,\n        callback: null\n    }\n\n    show = callback => event => {\n        event.preventDefault()\n\n        event = {\n            ...event,\n            target: { ...event.target, value: event.target.value }\n        }\n\n        this.setState({\n            open: true,\n            callback: () => callback(event)\n        })\n    }\n\n    hide = () => this.setState({ open: false, callback: null })\n\n    confirm = () => {\n        this.state.callback()\n        this.hide()\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.children(this.show)}\n\n                {this.state.open && (\n                    <Dialog>\n                        <h1>{this.props.title}</h1>\n                        <p>{this.props.description}</p>\n\n                        <button className=\"marker-modal-btn\" onClick={this.hide}>Cancel</button>&nbsp;\n                        <button className=\"marker-modal-btn\" onClick={this.confirm}>OK</button>\n                    </Dialog>\n                )}\n            </React.Fragment>\n        )\n    }\n}","import React, { Component } from 'react';\nimport firebase from './firebase'\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl'\nimport './ArtProjectMap.css'\nimport { ArtEntryModal } from './components'\nimport * as Constants from './constants'\nimport Moment from 'moment';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport Confirm from \"./Confirm\"\n\n\nclass ArtProjectMap extends Component {\n\n    constructor(props) {\n\n        super(props)\n        this.mapRef = React.createRef()\n\n        this.state = {\n            isLoadedData: false,\n            //introLoad: true,\n            artEntries: [],\n            viewport: {\n                latitude: 42.3876,\n                longitude: -71.0995,\n                zoom: 12,\n                width: '100vw',\n                height: \"100vh\",\n                style: { cursor: \"crosshair\" }\n            },\n            selectedArtEntry: null,\n            active: Constants.ALL_OPTIONS,\n            isModalOpen: false,\n            modalLng: null,\n            modalLat: null\n\n        }\n\n    }\n\n\n\n\n\n    updateStateWithNewArtEntry(artEntry) {\n\n        const newState = [...this.state.artEntries, artEntry];\n        this.setState({\n            artEntries: newState\n        })\n    }\n\n    addNewArtEntry = (week, typeOfArt) => {\n\n\n\n        const itemRef = firebase.database().ref('/');\n        const id = itemRef.push().key;\n\n        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.modalLng},${this.state.modalLat}.json?access_token=${process.env.REACT_APP_MAPBOX_TOKEN}`)\n            .then(response => response.json())\n            .then(result => {\n\n                const artEntry = {\n                    \"id\": id,\n                    \"Address\": result.features[0].place_name,\n                    \"Timestamp\": Moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),\n                    \"Type of Art\": typeOfArt,\n                    \"Week\": week,\n                    \"lat\": this.state.modalLat,\n                    \"lng\": this.state.modalLng\n                };\n                //itemRef.push(artEntry);\n                //itemRef.push(artEntry);\n                firebase.database().ref(`/${id}`).update(artEntry)\n\n                this.updateStateWithNewArtEntry(artEntry)\n            })\n    }\n\n\n\n    componentDidMount() {\n        //ping our api endpoint\n        //update our state\n\n        firebase.auth().signInAnonymously().then(() => {\n\n            firebase.database().ref('/').on('value', snapshot => {\n                let artEntries = snapshot.val()\n                const total = snapshot.numChildren()\n                let count = 0;\n                if (artEntries) {\n                    Object.entries(artEntries).map(([key, artEntry]) => {\n                        if (artEntry['lat'] && artEntry['lng']) {\n\n                            artEntry['id'] = key\n                            this.updateStateWithNewArtEntry(artEntry)\n\n                            count = count + 1\n                            if (count === total) {\n\n\n                                this.setState({ isLoadedData: true })\n\n                            }\n                        }\n\n\n                        return true\n                    })\n\n\n\n                }\n\n            })\n        })\n    }\n\n\n    handleViewportChange = viewport => {\n        this.setState({\n            viewport: { ...this.state.viewport, ...viewport }\n        })\n    }\n\n    setIsModalOpen = (isModalOpen) => {\n        this.setState({ isModalOpen })\n    }\n\n    handleDelete = () => {\n        console.log(\"deleting item\")\n\n        const itemRef = firebase.database().ref(`/${this.state.selectedArtEntry.id}`);\n        itemRef.remove();\n\n        const newArtEntries = this.state.artEntries.filter(artEntry => artEntry.id !== this.state.selectedArtEntry.id);\n\n        this.setState({\n            artEntries: newArtEntries,\n            selectedArtEntry: null\n        })\n    }\n\n    render() {\n\n        const { selectedArtEntry, active, isModalOpen, /*introLoad */ } = this.state;\n\n        const options = [\n            ...Constants.ALL_OPTIONS,\n            Constants.ALL_OPTIONS,\n        ]\n        const renderOptions = (option, i) => {\n            return (\n                <label key={i} className=\"toggle-container\">\n                    <input onChange={() => { this.setState({ active: option }) }} checked={JSON.stringify(active) === JSON.stringify(option)} name=\"toggle\" type=\"radio\" />\n                    <div className=\"toggle txt-s py3 toggle--active-white\">{(Array.isArray(option)) ? 'all' : option}</div>\n                </label>\n            );\n        }\n\n        if (!this.state.isLoadedData) return null;\n\n        const { viewport } = this.state\n\n        return (\n            <div>\n                <div className=\"toggle-group absolute top left ml12 mt12 border border--2 border--white bg-white shadow-darken10 z1\">\n                    {options.map(renderOptions)}\n                </div>\n\n                <ReactMapGL\n                    ref={this.mapRef}\n                    {...viewport}\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                    onViewportChange={this.handleViewportChange}\n                    mapStyle={\"mapbox://styles/jaddsky/ck97hlbf3077h1iqaeu26gyh8\"}\n                    onClick={(e) => {\n                        this.setState({\n                            \"modalLat\": e.lngLat[1],\n                            \"modalLng\": e.lngLat[0],\n                            \"isModalOpen\": true\n                        })\n                    }\n\n                    }\n                    getCursor={(e) => \"crosshair\"}\n\n                >\n\n                    {this.state.artEntries.map(artEntry => (\n                        artEntry.lat && artEntry.lng && (\n                            <Marker key={`${JSON.stringify(artEntry)}`} latitude={artEntry.lat} longitude={artEntry.lng}>\n                                <button className=\"marker-btn\" onClick={(e) => {\n                                    e.preventDefault();\n                                    this.setState({\n                                        selectedArtEntry: artEntry\n                                    })\n                                }}>\n\n                                    {\n                                        Constants.RECORDS.map(record => {\n                                            if (artEntry.Week === record.week && active.includes(record.option))\n                                                return (<img key={`${JSON.stringify(artEntry)}${JSON.stringify(record)}`} src={record.image} alt={record.alt} />)\n                                            return null;\n                                        }\n\n                                        )\n                                    }\n                                </button>\n                            </Marker>)\n\n                    ))}\n                    {/*                     {\n                        introLoad ?\n                            <Popup latitude={42.3876} longitude={-71.0995} closeOnClick={true} onClose={() => this.setState({ introLoad: false })}>\n                                <h1>Welcome to Camberville Art Project</h1>\n                                <p>All Camberville and Greater Boston area folks are invited to create art based on a shared theme each week and display it</p>\n                                <p>Themes will be very general and open-ended so that they remain accessible to all age groups and to allow us to be as creative as we want.</p>\n                                <p>Clicking on the icons of the map will give you coordinates of the art pieces shared by our community</p>\n                                <p>You can use the cross-hair cursor to input your contributions to the map, it will always default to this week's theme</p>\n                            </Popup> : null\n                    } */}\n\n                    {\n\n                        selectedArtEntry ?\n                            (<Popup latitude={selectedArtEntry.lat} longitude={selectedArtEntry.lng}\n                                onClose={() => this.setState({ selectedArtEntry: null })}\n                                closeOnClick={false}\n                                captureClick={true}\n                            >\n\n                                <u>{selectedArtEntry.Week}</u>\n                                <p>{selectedArtEntry['Address']}</p>\n                                <p>{selectedArtEntry['Type of Art']}</p>\n                                <p>{selectedArtEntry['Timestamp']}</p>\n\n                                <Confirm title=\"Confirm\" description=\"Are you sure?\">\n                                    {confirm => (\n                                        <button className=\"marker-modal-btn\" onClick={confirm(this.handleDelete)} >Delete Entry</button>\n                                    )}\n                                </Confirm>\n\n                            </Popup>) : null\n                    }\n\n\n\n                </ReactMapGL>\n\n                <ArtEntryModal isModalOpen={isModalOpen} setIsModalOpen={this.setIsModalOpen} addNewArtEntry={this.addNewArtEntry} />\n\n\n\n            </div >\n        )\n\n    }\n\n\n\n}\n\nexport { ArtProjectMap }","import React from 'react';\nimport { ArtProjectMap } from './ArtProjectMap'\n\nfunction App() {\n\n\n  return (\n    <ArtProjectMap />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}